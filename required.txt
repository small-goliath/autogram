이 프로젝트 명은 `autogram`으로, 사용자끼리 인스타그램 링크를 서로 공유해서 댓글을 작성해주는 서비스야.
웹 디자인은 `ux-web-designer` 에이전트가 디자인하고 백엔드는 `fastapi-architect` 에이전트가 설계 및 코드를 작성하고 프론트는 `nextjs-fastapi-architect` 에이전트가 설계 및 코드를 작성해.
이 프로젝트는 vercel에서 `hoby plan`으로 배포될 예정이야. 그렇기 때문에 `vercel-pricing-expert` 에이전트가 최종적으로 배포가 가능한지 체크해줘.

이 프로젝트 구조는 `nextjs-fastapi`로써, @api 디렉토리가 backend, @app 디렉토리가 frontend 역할을 맡아. 그리고 @batch 디렉토리는 python으로 만든 배치가 구축될거야.
아래 제약조건을 먼저 확인해.

[제약조건]
1. 현재 `hello world`와 같은 기본 코드가 작성되어 있는데, 불필요한 코드를 먼저 삭제해.
2. backend와 batch에서 서로 공통된 로직은 @core 에 작성해서 공유할 수 있도록 해야해.
3.  비즈니스로직은 `*_service.py`로 작성하고 실질적으로 데이터베이스에 접근하는 로직은 `*_db.py`로 작성해줘.
4. 데이터베이스 접근할 때에는 `SQLAlchemy`를 사용해야해.
5. 인스타그램 링크에 접근 할 때에는 단순 조회의 경우 `instaloader`를 사용하고 댓글 작성은 `instagrapi`를 사용해야해.
6. 인스타그램 링크에 대해서 단순 조회를 위해 접근할 때에는 `helper` 테이블에 저장된 계정을 사용해.
7. 헬퍼 계정으로 로그인할 때에는 관리자페이지로부터 헬퍼 계정을 등록할 때를 제외한 모든 곳에서는 `helper` 테이블에 저장된 세션을 통해 로그인이 되어야해.

이제 아래 배치 요구사항을 분석해서 구현해줘.
필요시 mysql 테이블을 추가해도 돼.

[배치 요구사항]
`KakaoTalk_latest.txt` 내용을 아래와 같이 파싱하면 누가 어떤 링크를 전송했는지 알 수 있어.
```python
class KakaoTalk(BaseModel):
    username: str
    link: str

def parsing() -> list[KakaoTalk]:
    kakaotalk_file = "batch/kakaotalk/KakaoTalk_latest.txt"
    logger.info(f"Processing file: {kakaotalk_file}")
    if not os.path.exists(kakaotalk_file):
        logger.info("최신 카카오톡 대화방 내용이 없습니다.")
        return
    
    start_date, end_date = get_target_week_dates()
    formatted_start = format_date(start_date)
    formatted_end = format_date(end_date)
    logger.info(f"타겟은 {formatted_start} 부터 {formatted_end} 전날까지 입니다.")

    is_last_week = False

    try:
        # 대화방 내용 중 지난주 내용만 체크
        chat = ""
        with open(kakaotalk_file, 'r', encoding='utf-8') as f:
            for line in f:
                # chat += line
                if is_last_week:
                    chat += line
                if line.strip() == formatted_start:
                    is_last_week = True
                elif line.strip() == formatted_end:
                    break

        # 품앗이 대상 피드/릴스 캐치
        message_pattern = re.compile(
            r"""^
            (20\d{2}\.\s*\d{1,2}\.\s*\d{1,2})         # 날짜
            (?:.*?)                                     # 0개 이상의 문자
            ,\s                                       # 콤마와 공백
            (.*?)                                     # 닉네임
            \s*:\s                                    # 공백과 콜론
            (?:(?!20\d{2}\.\s*\d{1,2}\.\s*\d{1,2}).)*?  # 날짜가 아닌 0개 이상의 문자열
            (https://www\.instagram\.com/[^\s\n]+)    # 인스타그램 링크
            \n+                                       # 1개 이상의 줄바꿈
            (?:(?!20\d{2}\.\s*\d{1,2}\.\s*\d{1,2}).)*?  # 날짜가 아닌 0개 이상의 문자열
            /(?P<digit>\d+)
            """,
            re.MULTILINE | re.VERBOSE
        )

        # 인스타그램 링크 맵핑
        kakaotalk_parsed = []
        messages = message_pattern.findall(chat)
        for match in messages:
            kakaotalk_parsed.append(KakaoTalk(
                username=str(match[1]).split('@')[1],
                link=str(match[2]).strip()
            ))

        return kakaotalk_parsed
```

1. 이 서비스를 이용하는 사람은 `sns_raise_user` 테이블에 `username`으로 저장되어있아.
2. `KakaoTalk_latest.txt`에서 누가 어떤 링크를 보냈는지 MySQL 데이터베이스의 `request_by_week` 테이블에 저장하는 배치를 구현해줘.
3. `KakaoTalk_latest.txt`에서 전송된 모든 링크에 대해서 본인 외의 다른 사용자가 댓글을 작성했는지 확인하고, 작성하지 않았으면 `user_action_verification` 테이블에 누가 어떤 링크에 댓글을 작성하지 않았는지 저장하는 배치를 구현해줘.
4. `user_action_verification` 테이블에서 모든 링크에 대해서 댓글을 조회하고 댓글 작성자 중에 작성하지 않은 사용자가 댓글을 작성했으면 해당 사용자에 대해서 `user_action_verification` 테이블에서 row를 삭제하는 배치를 구현해줘.

다음은 웹 서비스(api, app)에 대한 요구사항을 분석해서 구현해줘.
필요시 mysql 테이블을 추가해도 돼.

[웹 서비스 요구사항]
1. 네비게이션 바에는 `공지사항`과 `지난주 현황`, `SNS 키우기 품앗이 현황`, `[AI] 자동 댓글 받기 신청`, `[AI] 자동 댓글 달기 신청`, `인스타 언팔검색기`가 있어.
2. `공지사항` 탭은 `카카오톡 오픈채팅 참여 링크`와 `카카오톡 오픈채팅 참여 QR코드`, 공지사항이 노출 되어야해.
3. `지난주 현황` 탭은 `request_by_week` 테이블의 정보가 노출되고 `username`으로 필터링이 가능해야해.
4. `SNS 키우기 품앗이 현황` 탭은 `user_action_verification` 테이블의 정보가 노출되고 `username`으로 필터링이 가능해야해.
5. `[AI] 자동 댓글 받기 신청` 탭은 `AI 자동 댓글 기능`에 대한 설명과 `이점`이 노출되어야하고 신청 폼(인스타그램 아이디)를 입력받아 `consumer` 테이블에 저장돼야해.
6. `[AI] 자동 댓글 달기 신청` 탭은 `AI 자동 댓글 기능`에 대한 설명과 `이점`이 노출되어야하고 신청 폼(인스타그램 아이디와 패스워드, 필요 시 verification_code)를 입력받아 `producer` 테이블에 저장돼야해.
7. `인스타 언팔검색기` 탭은 신청 폼(인스타그램 아이디와 패스워드, 필요 시 verification_code)를 입력받아 해당 계정에 대해서 언팔로워를 찾아서 노출시켜야돼.

[관리자 페이지 요구사항]
1. 관리자 페이지에 진입이 가능한 계정은 `admin` 테이블에 저장되어있어.
2. 관리자 페이지에 진입했을 때 `admin` 테이블에 저장되어있는 계정만 접근이 가능해.
4. 네비게이션 바에 `SNS 품앗이 사용자 관리`, `인스타그램 헬퍼 등록`가 있어.
3. `SNS 품앗이 사용자 관리` 탭은 `sns_raise_user` 정보가 노출되어야하고 추가 및 삭제, 수정이 가능해야해.
4. `SNS 품앗이 사용자 관리` 탭에서 사용자가 삭제될 때, 해당 사용자의 다른 정보(request_by_week, user_action_verification 등) 모두가 함께 삭제 되어야해.
5. `인스타그램 헬퍼 등록` 탭은 `helper` 계정을 등록 및 삭제가 가능해야해. 헬퍼 계정에 대해서 신청 폼(인스타그램 아이디와 패스워드, 필요 시 verification_code)를 입력받아 로그인을 시도하고 해당 계정의 아이디, 패스워드, 세션을 저장해야해. 당연히 `instaloader`의 세션이겠지.